---
title: "pb_de"
author: "Almut LÃ¼tge"
---

## Differential expression analysis

Pseudobulk DE analysis on major cell types using edgeR

### Preamble

```{r}
#| label: load-libs
#| echo: true
#| output: false

library(scran)
library(dplyr)
library(tidyr)
library(ggplot2)
library(edgeR)
library(stringr)
library(SingleCellExperiment)

```

### Data

```{r}
#| label: data 
sce <- readRDS(file.path("..", "data", "sce_all_metadata_genes.rds"))
meta_dat <- read.csv(file.path("..", "data", "metadata.csv"),
                     sep = "\t", row.names = 1)

# major celltypes
sce$ct_broad <- sce$cell_type_name |> forcats::fct_collapse(
  "capillary" = c("1 capillary1", "2 capillary2"),
  "precollector" = c("3 precollector1", "4 precollector2"),
  "collector" = c("5 collector"),
  "valve" = c("6 valve"),
  "prolieferative" = c("7 proliferative"))

# major celltypes
sce$sub_cell_type <- sce$cell_type_name |> forcats::fct_collapse(
  "capillary1" = "1 capillary1", 
  "capillary2" = "2 capillary2",
  "precollector1" = "3 precollector1", 
  "precollector2" = "4 precollector2",
  "collector" = "5 collector",
  "valve" = "6 valve",
  "prolieferative" = "7 proliferative")

# filter sample
sce <- sce[, !sce$donor %in% c("2.0", "5.0")]
sce$donor <- sce$donor |> droplevels()
sce$tissue <- sce$tissue |> droplevels()

# mean_expr
mean_expr_fat <- rowMeans(logcounts(sce[,sce$tissue %in% "fat"]))
mean_expr_skin <- rowMeans(logcounts(sce[,sce$tissue %in% "skin"]))

```

### Pseudobulk DE

```{r}
#| label: pb de

summed <- aggregateAcrossCells(sce,
                               id=colData(sce)[,c("ct_broad", "donor", "tissue")])
# filter min cells
summed.filt <- summed[,summed$ncells >= 10]
print(table(summed.filt$tissue, summed.filt$ct_broad))
  
# de
design <- model.matrix(~ donor + tissue, as.data.frame(colData(summed.filt)))
de.results <- pseudoBulkDGE(summed.filt, 
    label=summed.filt$ct_broad,
    design=~donor + tissue,
    coef="tissueskin",
    condition=summed.filt$tissue 
)

is.de <- decideTestsPerLabel(de.results, threshold=0.05)
summarizeTestsPerLabel(is.de)
```

### Pseudobulk subcelltypes

```{r}
#| label: pb sub de

summed <- aggregateAcrossCells(sce,
                               id=colData(sce)[,c("sub_cell_type", "donor", "tissue")])
# filter min cells
summed.filt <- summed[,summed$ncells >= 10]
print(table(summed.filt$tissue, summed.filt$sub_cell_type))
  
# de
design <- model.matrix(~ donor + tissue, as.data.frame(colData(summed.filt)))
de_sub.results <- pseudoBulkDGE(summed.filt, 
    label=summed.filt$sub_cell_type,
    design=~donor + tissue,
    coef="tissueskin",
    condition=summed.filt$tissue 
)

is.de <- decideTestsPerLabel(de_sub.results, threshold=0.05)
summarizeTestsPerLabel(is.de)

#save results
lapply(names(de_sub.results), function(nam){
  saveRDS(de_sub.results[[nam]], file.path("..", "out", "de", "subcelltypes", paste0("pb_", nam, ".rds")))
  write.csv(de_sub.results[[nam]], file.path("..", "out", "de", "subcelltypes", paste0("pb_", nam, ".csv")))
  })

```

### Pseudobulk DE all

```{r}
#| label: pb all
summed_all <- aggregateAcrossCells(sce,
                               id=colData(sce)[,c("donor", "tissue")])
# filter min cells
summed_all.filt <- summed_all[,summed_all$ncells >= 10]
table(summed_all.filt$tissue)
  
# de
design <- model.matrix(~ donor + tissue, as.data.frame(colData(summed_all.filt)))
dgl <- DGEList(counts(summed_all.filt))
keep <- filterByExpr(dgl, design)
dgl <- dgl[keep, , keep.lib.sizes=FALSE]
dgl <- calcNormFactors(dgl)
dgl <- estimateDisp(dgl, design)
fit <- glmQLFit(dgl, design)
de <- glmQLFTest(fit, coef="tissueskin")

tt <- topTags(de, n = Inf)$table
tt$full_gene_name <- rownames(tt)
tt$gene_symbol <- gsub("^.*\\.","",rownames(tt))


tt$meanExpr_fat <- mean_expr_fat[rownames(tt)]
tt$meanExpr_skin <- mean_expr_skin[rownames(tt)]

saveRDS(tt, file.path("..", "out", "de", "pb_all.rds"))
write.csv(tt, file.path("..", "out", "de", "pb_all.csv"))



```

### Differential abundance

```{r}
#| label: diff abundance
sce_sub <- sce[,!sce$Sample %in% c("donor5_recovery", "donor2_fat")]
sce_sub$Sample <- sce_sub$Sample |> droplevels()
abundances <- table(sce_sub$cell_type_name, sce_sub$Sample)
abundances <- unclass(abundances)

extra.info <- colData(sce_sub)[match(colnames(abundances), sce_sub$Sample),]
y.ab <- DGEList(abundances, samples=extra.info)

design <- model.matrix(~factor(donor) + factor(tissue), y.ab$samples)
y.ab <- estimateDisp(y.ab, design, trend="none")
summary(y.ab$common.dispersion)
plotBCV(y.ab, cex=1)

fit.ab <- glmQLFit(y.ab, design, robust=TRUE, abundance.trend=FALSE)
summary(fit.ab$var.prior)
summary(fit.ab$df.prior)
plotQLDisp(fit.ab, cex=1)

res <- glmQLFTest(fit.ab, coef=ncol(design))
summary(decideTests(res))

topTags(res)
```
